.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "iTagger::FastaDb::Fasta 3"
.TH iTagger::FastaDb::Fasta 3 "2015-03-02" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Fasta \- Simple object for Fasta sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $seq=new Fasta( $hdr, $seq );
\&    $seq\->qc;
\&    print $seq\->output;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object for a single read sequence, with methods for basic manipulation and quality control.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "new $hdr $seq" 5
.el .IP "new \f(CW$hdr\fR \f(CW$seq\fR" 5
.IX Item "new $hdr $seq"
Initialize new sequence object.
.IP "_parse_header" 5
.IX Item "_parse_header"
Extract info from header, which could be formatted in several ways.
.IP "header <$reformat>" 5
.IX Item "header <$reformat>"
Returns the object's header line.  Optional flag will cause original header to be used rather than standard format (default).
.IP "id" 5
.IX Item "id"
Returns the object's \s-1ID\s0, which is the sequence's unique identifier without comments which may be present in the header.
It cannot be changed directly, but will be updated whenever the header, base, or pair is changed.
.IP "base" 5
.IX Item "base"
If the read is paired, returns it's base \s-1ID\s0 (same for both members of pair); returns undefined if not paired.
Providing the optional argument will change the base (and the id and header).
.IP "barcode" 5
.IX Item "barcode"
If the read contains an Illumina molecular barcode \s-1ID\s0, it will be returned; otherwise returns undef.
Supplying an optional argument will set the barcode.
.IP "pair" 5
.IX Item "pair"
Returns the read's ord in the pair; undef otherwise.  It may be changed by supplying the optional extra argument.
To clear the pairing information, pass it an empty string, not \s-1NULL\s0.
.IP "seq ($new_seq)" 5
.IX Item "seq ($new_seq)"
Returns the read's complete sequence, without newlines.  Optional argument changes it.
.IP "revcomp" 5
.IX Item "revcomp"
Reverse-complements a sequence.
.IP "output" 5
.IX Item "output"
Returns a multiline string of the sequence in Fasta format.  Returns no output if sequence is empty.  Optional flag will cause original header to be output rather than standard format (default).
.IP "len" 5
.IX Item "len"
Returns length of the seq
.ie n .IP "qc $winsize $meanq $minlen $maxn" 5
.el .IP "qc \f(CW$winsize\fR \f(CW$meanq\fR \f(CW$minlen\fR \f(CW$maxn\fR" 5
.IX Item "qc $winsize $meanq $minlen $maxn"
To perform minimum length filtering, and filtering reads with too many Ns.
.IP "trim_terminal_Ns" 5
.IX Item "trim_terminal_Ns"
Discard uninformative Ns from the ends of the sequence.
.IP "length_filter" 5
.IX Item "length_filter"
If the sequence is shorter than the minimum length, the sequence string is emptied so they will not be
returned by the output method.  Returns true if sequence was filtered.
.IP "N_filter" 5
.IX Item "N_filter"
If the sequence contains more than the allowed number of Ns, the sequence string is emptied.
Returns true if sequence was filtered.
.ie n .IP "low_complexity_filter $pct_len" 5
.el .IP "low_complexity_filter \f(CW$pct_len\fR" 5
.IX Item "low_complexity_filter $pct_len"
If the sequence is >= \f(CW$pct_len\fR mono\- or di-nucleotide repeats, clears the sequence string and returns true.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No support for paired reads.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010 U.S. Department of Energy Joint Genome Institute
.PP
All right reserved. This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Edward Kirton <ESKirton@LBL.gov>
