.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "iTagger::FastqDb::Fastq 3"
.TH iTagger::FastqDb::Fastq 3 "2015-03-02" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
iTagger::Fastq \- Simple object for Fastq sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    my $rec=new Fastq( $hdr, $id, $base, $barcode, $pair, $seq, $qual, $qc_params, $barcodes, $barcode_variants);
\&    print $rec\->output;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object for a single read sequence, with methods for basic manipulation and quality control.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "new $hdr $seq $qual $qc_params $barcodes $variants" 5
.el .IP "new \f(CW$hdr\fR \f(CW$seq\fR \f(CW$qual\fR \f(CW$qc_params\fR \f(CW$barcodes\fR \f(CW$variants\fR" 5
.IX Item "new $hdr $seq $qual $qc_params $barcodes $variants"
Initialize new sequence object. If the quality scores use Illumina scaling, the \f(CW$qual_to_sanger\fR flag *must* be set as the object
assumes and requires sanger-scaling.  Quality encoding method is determined by FastqDb class instead.
.IP "convert_qual_to_sanger" 5
.IX Item "convert_qual_to_sanger"
Convert the quality string from Illumina to Sanger scaling.
.IP "trim_roche_mid" 5
.IX Item "trim_roche_mid"
Trim the first x bases which are the 454 \s-1MID\s0.
.IP "check_barcode" 5
.IX Item "check_barcode"
Check if barcode is valid, perform 1\-base error correction, or filter read.
.IP "_parse_header ($hdr)" 5
.IX Item "_parse_header ($hdr)"
Private method used by constructor to parse a header and populate object's ID-related variables.  Doesn't return anything.
.IP "header <$reformat>" 5
.IX Item "header <$reformat>"
Returns the object's header line.  Optional flag will output original \s-1ID\s0 rather than standard format (default).
.IP "id" 5
.IX Item "id"
Returns the object's \s-1ID\s0, which is the sequence's unique identifier without comments which may be present in the header.
It cannot be changed directly; set header, base, barcode, or pair instead.
.IP "base" 5
.IX Item "base"
Returns the base of the \s-1ID\s0; both paired reads will have the same base.
Optionally set base of the \s-1ID\s0.
.IP "barcode" 5
.IX Item "barcode"
If the read contains an Illumina molecular barcode \s-1ID\s0, it will be returned; otherwise returns undef.
Supplying an optional argument will set the barcode; passing an empty string will clear the barcode.
.IP "pair" 5
.IX Item "pair"
Returns the read's ord in the pair; undef otherwise.
.IP "unpair" 5
.IX Item "unpair"
Method to clear pairing of a read (e.g. singleton).
.IP "seq" 5
.IX Item "seq"
Returns the read's complete sequence, without newlines.
.IP "len" 5
.IX Item "len"
Returns the length of the sequence (returns 0 if filtered).
.IP "revcomp" 5
.IX Item "revcomp"
Reverse-complements a sequence and quality scores.
.IP "qual ($new_qual)" 5
.IX Item "qual ($new_qual)"
Returns the read's quality string, without newlines.
.IP "qual_arrayref" 5
.IX Item "qual_arrayref"
Returns an arrayref of sanger-scaled quality scores.
.IP "qual_stats" 5
.IX Item "qual_stats"
Returns statistics on quality scores.
.IP "del" 5
.IX Item "del"
Mark this record as filtered.  Always returns 0.
.IP "filtered" 5
.IX Item "filtered"
Returns the reason why the read was filtered; undef otherwise.
.IP "pass" 5
.IX Item "pass"
Returns 1 if read passes \s-1QC\s0, 0 otherwise.
.IP "output" 5
.IX Item "output"
Returns a multiline string of the sequence in Fastq format.  Filtered unpaired reads return an empty string, while filtered paired reads return an empty record, so pairing won't be broken.  Optional flag to use original read \s-1ID\s0 rather than standard format (default).
.IP "output_fasta" 5
.IX Item "output_fasta"
Returns a multiline string of the sequence in Fasta format if read passed \s-1QC\s0 filters.
in the header.
.IP "output_qual" 5
.IX Item "output_qual"
Returns a multiline string of the sequence's quality scores in phred format only if read passed \s-1QC\s0 filters.
.SS "\s-1QC\s0 Methods"
.IX Subsection "QC Methods"
Each function returns 1 if read passes filter, 0 otherwise.
.IP "qc" 5
.IX Item "qc"
To perform \s-1QC\s0 steps defined in \f(CW%qc_params\fR.
.IP "trim3" 5
.IX Item "trim3"
Trim uncalled bases from 3' end of read (i.e. bp=N or qual=2).
.IP "trim5_bp" 5
.IX Item "trim5_bp"
Remove the specified number of bases from the 5' end.
.IP "trim3_bp" 5
.IX Item "trim3_bp"
Remove the specified number of bases from the 3' end.
.IP "min_len" 5
.IX Item "min_len"
If the sequence is shorter than the minimum length, the record is filtered.
.IP "max_n" 5
.IX Item "max_n"
If the sequence contains more than the allowed number of Ns, the record is filtered.
.ie n .IP "low_complexity $pct_len" 5
.el .IP "low_complexity \f(CW$pct_len\fR" 5
.IX Item "low_complexity $pct_len"
If the sequence is >= \f(CW$pct_len\fR mono\- or di-nucleotide repeats, the record is filtered.
.IP "low_q" 5
.IX Item "low_q"
Filter record if there are too many low-quality bases. Default minq=10.
.IP "trim3_exp_err" 5
.IX Item "trim3_exp_err"
Trim 3' end of read once total expected error of 5' bases reaches max (default = 0.5).  Fail if read has less than minimum specified number of bp (default = 20).
.IP "exp_err" 5
.IX Item "exp_err"
Fail read if expected number of errors exceeds threshold.
.IP "exp_err_per_kb" 5
.IX Item "exp_err_per_kb"
Fail read if expected number of errors exceeds threshold.
.IP "trim_to" 5
.IX Item "trim_to"
Trim read to exactly this many bp by discarding 3' bases.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Reads must be named in accordance with Illumina naming conventions.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010 U.S. Department of Energy Joint Genome Institute
.PP
All right reserved. This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Edward Kirton <ESKirton@LBL.gov>
