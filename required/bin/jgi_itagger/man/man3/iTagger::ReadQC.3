.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "iTagger::ReadQC 3"
.TH iTagger::ReadQC 3 "2015-03-02" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
iTagger::ReadQC
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains functions for preprocessing reads prior to clustering.  It should receive a \s-1FASTQ\s0 file of raw sequence data corresponding to one barcode of one lane (ie. all seqs belong to same library or experimental condition).
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0 \s-1AND\s0 \s-1DESTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR AND DESTRUCTOR"
.IP "new" 5
.IX Item "new"
Constructor.  Config is either a hashref or the path to an .ini format file.
.IP "\s-1DESTROY\s0" 5
.IX Item "DESTROY"
Renames logfile before exiting.
.SS "\s-1DATA\s0 \s-1PROCESSING\s0"
.IX Subsection "DATA PROCESSING"
.IP "libQC" 5
.IX Item "libQC"
Main function to \s-1QC\s0 a library of reads.  All reads should belong to the same experimental condition (library).  Parameters come from required configuration file.
.IP "log" 5
.IX Item "log"
Append message to log summary stats file.
.IP "duk" 5
.IX Item "duk"
Filter contaminant reads.  There may be one or more reference db files.  Each reference db is filtered separately (in order) so that the number of hits per db is known.
.IP "_duk" 5
.IX Item "_duk"
Run duk contaminant filter with a single db of contaminant sequences.  If paired reads then remove any singletons generated.
.IP "cutadapt" 5
.IX Item "cutadapt"
Run cutadapt to remove primer sequences.
.IP "_cutadaptUnpaired" 5
.IX Item "_cutadaptUnpaired"
Trim primer sequences.  Unless all specified primers are found, the read is filtered.
.IP "_cutadaptUnpairedStrandInspecific" 5
.IX Item "_cutadaptUnpairedStrandInspecific"
Trim primer sequences. If primers are not found, reverse-complement and try again.  Filter reads in which both primers not found in either strand.  This was written for PacBio sequences.
.IP "_cutadaptPaired" 5
.IX Item "_cutadaptPaired"
Run cutadapt on paired sequences.  A read-pair is filtered if both primers are not found.
.IP "_qualTrim" 5
.IX Item "_qualTrim"
Trim entire read-pair to desired size by sliding window mean expected error.  A read will not be trimmed beyond it's minimum read length. This method is used by the iterative merging of overlapping paired reads methods. Failed reads (e.g. too short) are written to a separate file, untrimmed.
.IP "iterativeFlash" 5
.IX Item "iterativeFlash"
Attempt to merge overlapping read-pairs.  Iteratively use flash on increasingly trimmed read-pairs.
.IP "iterativePandaseq" 5
.IX Item "iterativePandaseq"
Merge read-pairs using pandaseq on increasingly trimmed read-pairs.  Pandaseq is an alternative to Flash and the method here is similar.  We don't use the primer trimming capabilities of pandaseq so we can report the number of seqs with/without both primers and we wish for not-combined reads to be primer-trimmed as well (Pandaseq filters reads when primers not found).
.IP "lengthFilter" 5
.IX Item "lengthFilter"
Optionally, the sequence amplicon may be hard-trimmed at 5' and/or 3' ends.  Filter short sequences.
.IP "stitch" 5
.IX Item "stitch"
For read-pairs that could not be merged/extended, trim read1 and read2 to specified lengths (filtering if either too short), reverse-complement read2, and concatenate.  Optionally, a spacer sequence (e.g. '\s-1NNNNNN\s0') may be inserted between the read-ends.  Returns number of read-pairs successfully stitched together.
.IP "qualReport" 5
.IX Item "qualReport"
Generate report on base qualities (for unpaired sequences), using Fastx toolkit's fastx_quality_stats.py, and generate plots.
.IP "qualReportPaired" 5
.IX Item "qualReportPaired"
Generate report on base qualities for paired sequences, using Fastx toolkit's fastx_quality_stats.py, and generate plots.
.IP "expErrFilter" 5
.IX Item "expErrFilter"
Discard sequences with expected error exceeding threshold.
.IP "seqObs" 5
.IX Item "seqObs"
Generate report on base qualitites, dereplicate sequences, and output in seq-obs tabular format.
.ie n .IP "$this\->run" 5
.el .IP "\f(CW$this\fR\->run" 5
.IX Item "$this->run"
Run external executable, logconfess on nonzero exit status.
.ie n .IP "$this\->_set" 5
.el .IP "\f(CW$this\fR\->_set" 5
.IX Item "$this->_set"
Return value from config or default value.  If default not defined, it must be defined in the config, otherwise logconfess with error message.
.SH "AUTHORS"
.IX Header "AUTHORS"
Edward Kirton, Julien Tremblay
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013 \s-1US\s0 \s-1DOE\s0 Joint Genome Institute.  Use freely under the same license as Perl itself.  Refer to duk and flash documentation for their own copyright/license information.
