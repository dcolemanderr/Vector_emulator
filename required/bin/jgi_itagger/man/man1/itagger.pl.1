.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ITAGGER 1"
.TH ITAGGER 1 "2015-03-02" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
itagger.pl
.SH "PURPOSE"
.IX Header "PURPOSE"
Pipeline for amplicon analysis (e.g. 16S rRNA, fungal \s-1ITS\s0)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    itagger.pl \-\-config C<path> \-\-lib C<path> \-\-dir C<path>
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.ie n .IP "\-\-config ""path""" 5
.el .IP "\-\-config \f(CWpath\fR" 5
.IX Item "--config path"
Config file in Ini format; see below.
.ie n .IP "\-\-lib ""path""" 5
.el .IP "\-\-lib \f(CWpath\fR" 5
.IX Item "--lib path"
Table of library name and location of Fastq file.  File should contain all and only reads associated with a library (i.e. one barcode of one lane of one run).
.ie n .IP "\-\-dir ""path""" 5
.el .IP "\-\-dir \f(CWpath\fR" 5
.IX Item "--dir path"
Base folder for output.
.ie n .IP "\-\-group ""string""" 5
.el .IP "\-\-group \f(CWstring\fR" 5
.IX Item "--group string"
Upon successful completion, set group for all folders, files; optional.
.ie n .IP "\-\-tarball ""path""" 5
.el .IP "\-\-tarball \f(CWpath\fR" 5
.IX Item "--tarball path"
Compress output; does not delete uncompressed output dir.  Optional.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
All paths and parameters are included in the configuration file, in Ini format, which has sections described below and are formatted thusly:
.PP
.Vb 2
\&    [AMPLICON]
\&    NAME=16S_V4
.Ve
.SS "\s-1AMPLICON\s0"
.IX Subsection "AMPLICON"
Information about the amplicon being sequenced.
.ie n .IP "\s-1NAME\s0 = ""string""" 5
.el .IP "\s-1NAME\s0 = \f(CWstring\fR" 5
.IX Item "NAME = string"
Name of the amplicon; examples: 16S_V, \s-1ITS\s0.  Required.
.ie n .IP "\s-1LEN_MEAN\s0 = ""int""" 5
.el .IP "\s-1LEN_MEAN\s0 = \f(CWint\fR" 5
.IX Item "LEN_MEAN = int"
Average length of the amplicon sequence, as determined from Reference database.  That is, base-pairs between primers.  Required.
.ie n .IP "\s-1LEN_STDEV\s0 = ""int""" 5
.el .IP "\s-1LEN_STDEV\s0 = \f(CWint\fR" 5
.IX Item "LEN_STDEV = int"
Standard deviation in amplicon length.  Required.
.ie n .IP "\s-1TRIM5\s0 = ""int""" 5
.el .IP "\s-1TRIM5\s0 = \f(CWint\fR" 5
.IX Item "TRIM5 = int"
The number of bp from the 5' end of the amplicon to exclude from clustering and classification.  That is, bases immediately following the forward primer.  Allows exclusion of moderately conserved sequence which are problematic for classification.  For example, used for \s-1ITS\s0 but not 16S analysis.  Optional.
.ie n .IP "\s-1TRIM3\s0 = ""int""" 5
.el .IP "\s-1TRIM3\s0 = \f(CWint\fR" 5
.IX Item "TRIM3 = int"
The number of bp from the 3' end of the amplicon to trim (i.e. bases following reverse primer).  Optional.
.SS "\s-1DUK\s0"
.IX Subsection "DUK"
We currently use \f(CW\*(C`duk\*(C'\fR to remove contaminant reads; namely, sequence associated with sequencing library construction (control and adapter sequences).
.ie n .IP "\s-1CONTAM_DB\s0 = ""path""" 5
.el .IP "\s-1CONTAM_DB\s0 = \f(CWpath\fR" 5
.IX Item "CONTAM_DB = path"
Multiple reference files in Fasta format are supported. Typically these would be \s-1QC\s0 sequences (e.g. PhiX) and adapter sequences.  Providing these as separate files will result in their numbers being reported separately. Optional.
.ie n .IP "\s-1KMER\s0 = ""int""" 5
.el .IP "\s-1KMER\s0 = \f(CWint\fR" 5
.IX Item "KMER = int"
Kmer size for duk search.  Higher number increass specificity at expense of sensitivity.  Optional; default=21.
.ie n .IP "\s-1STEP\s0 = ""int""" 5
.el .IP "\s-1STEP\s0 = \f(CWint\fR" 5
.IX Item "STEP = int"
Step size for search.  Lower number increases sensitivity but is slower.  Optional; default=1.
.ie n .IP "\s-1CUTOFF\s0 = ""float""" 5
.el .IP "\s-1CUTOFF\s0 = \f(CWfloat\fR" 5
.IX Item "CUTOFF = float"
Cutoff detection level score.  Optional; default=1.
.SS "\s-1CUTADAPT\s0"
.IX Subsection "CUTADAPT"
\&\f(CW\*(C`cutadapt\*(C'\fR is used to remove primer sequences.  For paired reads, if the primer is not found in both foward and reverse reads, the read-pair is filtered.
.ie n .IP "\s-1PRIMER1\s0 = ""string""" 5
.el .IP "\s-1PRIMER1\s0 = \f(CWstring\fR" 5
.IX Item "PRIMER1 = string"
Forward (read1) primer; may contain ambiguous nucleotide characters.  Must be in same strand as read1.  Required.
.ie n .IP "\s-1PRIMER2\s0 = ""string""" 5
.el .IP "\s-1PRIMER2\s0 = \f(CWstring\fR" 5
.IX Item "PRIMER2 = string"
Reverse (read2) primer; may contain ambiguous nt chars.  Must be in same strand as read2.  Required.
.ie n .IP "\s-1ERROR_RATE\s0 = ""float""" 5
.el .IP "\s-1ERROR_RATE\s0 = \f(CWfloat\fR" 5
.IX Item "ERROR_RATE = float"
Maximum fraction of errors allowed in detected primer sequence.  Increasing this number will allow more matches, but may increase false positives.  As we expect and require finding primer matches, a high error rate is recommended.  Optional; default=0.4.
.ie n .IP "\s-1MIN_OVERAP\s0 = ""int""" 5
.el .IP "\s-1MIN_OVERAP\s0 = \f(CWint\fR" 5
.IX Item "MIN_OVERAP = int"
The minimum length of primer that must be found in the read to be considered a good hit.  Optional; default=10.
.SS "Merging Paired Reads"
.IX Subsection "Merging Paired Reads"
It is assumed the amplicon primers were designed such that the read-pairs will overlap, to provide complete coverage of the amplicon sequence.  Paired-end reads are merged (assembled) into a single sequence using either \f(CW\*(C`Flash\*(C'\fR or \f(CW\*(C`Pandaseq\*(C'\fR.  Pairs which are not combined are discarded.
.PP
\fI\s-1FLASH\s0\fR
.IX Subsection "FLASH"
.ie n .IP "\s-1MIN_OVERLAP\s0 = ""int""" 5
.el .IP "\s-1MIN_OVERLAP\s0 = \f(CWint\fR" 5
.IX Item "MIN_OVERLAP = int"
Minimum bp overlap required to merge paired reads.  Optional; default=10.
.ie n .IP "\s-1MAX_MISMATCH\s0 = ""float""" 5
.el .IP "\s-1MAX_MISMATCH\s0 = \f(CWfloat\fR" 5
.IX Item "MAX_MISMATCH = float"
Maximum fraction of errors allowed in the overlap region.  Optional; default=0.3.
.PP
\fI\s-1PANDASEQ\s0\fR
.IX Subsection "PANDASEQ"
.ie n .IP "\s-1THRESHOLD\s0 = ""float""" 5
.el .IP "\s-1THRESHOLD\s0 = \f(CWfloat\fR" 5
.IX Item "THRESHOLD = float"
Matching threshold (0\-1); optional (default=0.5).
.ie n .IP "\s-1MIN_OVERLAP\s0 = ""int""" 5
.el .IP "\s-1MIN_OVERLAP\s0 = \f(CWint\fR" 5
.IX Item "MIN_OVERLAP = int"
Minimum overlap in base pairs; optional (default=10).
.SS "\s-1AMPQC\s0"
.IX Subsection "AMPQC"
Quality filtering of amplicons prior to clustering and classification.
.ie n .IP "\s-1EXP_ERR\s0 = ""float""" 5
.el .IP "\s-1EXP_ERR\s0 = \f(CWfloat\fR" 5
.IX Item "EXP_ERR = float"
Filter amplicons whose total expected number of errors exceeds this threshold.  Optional; default=1.0.
.SS "\s-1USEARCH\s0"
.IX Subsection "USEARCH"
All libraries' equences are dereplicated and sorted by decreasing total normalized size before being clustered using \f(CW\*(C`USEARCH\*(C'\fR.  We cluster iteratively, starting from a low centroid radius.  The clustering step is partially parallelized for speed.
.ie n .IP "\s-1MIN_LIB_SIZE\s0 = ""int""" 5
.el .IP "\s-1MIN_LIB_SIZE\s0 = \f(CWint\fR" 5
.IX Item "MIN_LIB_SIZE = int"
Discard libraries with less than this number of sequences.  Optional; default=1000.
.ie n .IP "\s-1MAX_RADIUS\s0 = ""int""" 5
.el .IP "\s-1MAX_RADIUS\s0 = \f(CWint\fR" 5
.IX Item "MAX_RADIUS = int"
Sequences with less than this distance (percent sequence mismatch) from the centroid are added to the cluster.  Optional; default=3.
.ie n .IP "\s-1REF_DB\s0 = ""path""" 5
.el .IP "\s-1REF_DB\s0 = \f(CWpath\fR" 5
.IX Item "REF_DB = path"
Reference database of known amplicon sequences, used for chimera checking. The database should be of high quality and not include chimeric sequences.  It is recommended that the reference sequences are trimmed to the amplicon sequence (i.e. electronic \s-1PCR\s0) and dereplicated.  They may also be clustered to reduce the database size.  Required.
.SS "\s-1OTU_FILTER\s0"
.IX Subsection "OTU_FILTER"
.ie n .IP "\s-1MIN_NORM_SIZE\s0 = ""int""" 5
.el .IP "\s-1MIN_NORM_SIZE\s0 = \f(CWint\fR" 5
.IX Item "MIN_NORM_SIZE = int"
An \s-1OTU\s0 must have \f(CW\*(C`MIN_NUM_LIBS\*(C'\fR different libraries with at least \f(CW\*(C`MIN_NORM_SIZE\*(C'\fR total normalized reads, otherwise the \s-1OTU\s0 is filtered.  Optional; default=10.
.ie n .IP "\s-1MIN_NUM_LIBS\s0 = ""int""" 5
.el .IP "\s-1MIN_NUM_LIBS\s0 = \f(CWint\fR" 5
.IX Item "MIN_NUM_LIBS = int"
See \f(CW\*(C`MIN_NORM_SIZE\*(C'\fR.  Optional; default=2.
.SS "\s-1RDP_CLASSIFIER\s0"
.IX Subsection "RDP_CLASSIFIER"
Parameters for \s-1RDP\s0 Classifier and for filtering clusters from further analysis.  For example, to discard chloroplast sequences from 16S analysis.
.ie n .IP "\s-1TRAINING_FILE\s0 = ""path""" 5
.el .IP "\s-1TRAINING_FILE\s0 = \f(CWpath\fR" 5
.IX Item "TRAINING_FILE = path"
Amplicon-specific \s-1RDP\s0 Classifier training file.  Required.
.ie n .IP "\s-1LEVEL\s0 = ""string""" 5
.el .IP "\s-1LEVEL\s0 = \f(CWstring\fR" 5
.IX Item "LEVEL = string"
An \s-1OTU\s0 must be classified at this level with a confidence above cutoff (below) in order to pass.  Optional; default=\*(L"class\*(R".
.ie n .IP "\s-1CUTOFF\s0 = ""float""" 5
.el .IP "\s-1CUTOFF\s0 = \f(CWfloat\fR" 5
.IX Item "CUTOFF = float"
Filter OTUs which do not meet minimum confidence level at the specified taxonomic classification (above).  Optional default=0.5.
.ie n .IP "\s-1FILTER\s0 = ""string""" 5
.el .IP "\s-1FILTER\s0 = \f(CWstring\fR" 5
.IX Item "FILTER = string"
To filter OTUs which do not match that described in search string.  String follows the pattern: X_\|_NAME, where X indicated taxonomic level (k=kingdom, p=phylum, c=class, o=order, f=family, g=genus).  Multiple search strings should be separated by pipe (\*(L"|\*(R") characters with no spaces.  Use quotation marks if your search string contains any spaces.  Examples: k_\|_bacteria|k_\|_archaea, k_\|_fungi.  Case insensitive.  Optional.
.SS "\s-1QIIME\s0"
.IX Subsection "QIIME"
Analysis of \s-1OTU\s0 tables using \f(CW\*(C`QIIME\*(C'\fR.
.ie n .IP "\s-1RAREFY_MIN\s0 = ""float""" 5
.el .IP "\s-1RAREFY_MIN\s0 = \f(CWfloat\fR" 5
.IX Item "RAREFY_MIN = float"
Cutoff for single-rarefaction.  Optional; by default use 10% of normalized mean.
.SS "\s-1DIVERSITY\s0 \fI(beta-testing at this time)\fP"
.IX Subsection "DIVERSITY (beta-testing at this time)"
Diversity plots and estimates using \f(CW\*(C`R\*(C'\fR scripts.  Run only if \f(CW\*(C`FACTORS\*(C'\fR is defined.
.ie n .IP "\s-1FACTORS\s0 = ""PATH""" 5
.el .IP "\s-1FACTORS\s0 = \f(CWPATH\fR" 5
.IX Item "FACTORS = PATH"
Table of libraries X factors.  Library IDs must match exactly to those used in the \s-1OTU\s0 table (i.e. \f(CW\*(C`DATA\*(C'\fR section above).
.SH "AUTHORS"
.IX Header "AUTHORS"
Julien Tremblay (julien.tremblay@mail.mcgill.ca),
Edward Kirton (ESKirton@LBL.gov)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2013 United States Department of Energy Joint Genome Institute.  Use freely under the same license as Perl itself.  Refer to wrapped tools for their own licenses and copyright information.
