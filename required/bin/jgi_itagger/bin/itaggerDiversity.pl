#!/usr/bin/env perl

use strict;
use warnings;

use Env qw/TMPDIR RDP_JAR_PATH/;

use Getopt::Long;
use POSIX qw/strftime/;
use Sys::Hostname;
use Statistics::Descriptive;
use List::Util qw(sum);
use PDF::Create;
use iTagger::FastqDb;
use iTagger::FastaDb;
use PDF::Create;
use File::Spec::Functions qw(rel2abs);
use File::Basename;
use File::Temp;
use File::Which;
use File::Path qw(make_path remove_tree);

our $VERSION = "0.5";
$SIG{INT} = sub{exit}; #Handle ungraceful exits with CTRL-C.

my $usage=<<'ENDHERE';
NAME:
itaggerDiversity.pl

PURPOSE:
Classify sequences with RDP classifier using a Greengene training set
Generate OTU table in Qiime format
Generate PCA + taxonomic summary and various other metrics graphs and 
spreadsheets using the Qiime tools (if --mapping_file is provided)
The purpose of this pipeline is to generate diversity metrics, graph
etc, after having manually parsed files generated by itagger. (Say
for instance, one wants to remove chloroplast OTUs from a OTU table
and re-analyze his data with these modifications. 

INPUT:
--infile_cluster_table <string>   : Cluster table. Table have to correspond to the cluster 
                                    sequences fasta file also submitted
--infile_cluster_fasta <string>   : Cluster to analyze in fasta format
--infile_otu_table <string>       : OTU table. if --infile_otu_table arg, then don't provide 
                                    --infile_cluster_table and --infile_cluster_fasta args.
--infile_otu_fasta <string>       : Infile having OTU sequences corresponding to OTU table 
                                    specified in --infile_otu
--barcodes <string>               : Barcode file in fasta format.
--mapping_file <string>           : Mapping file in Qiime format (see example file). If not 
                                    set, the pipeline 
                                    will not compute/generate beta and alpha diversity metrics.
--config_file <string>            : Configuration file containing paths to the RDP training set, 
                                    and core alignment database.
--no_unifrac                      : Set this flag if no unifrac distance is needed. For 
                                    instance, if no reference tree is availble.

--num_threads                     : Default:1. At the moment, only used for PyNAST alignment
                                    step.

ADVANCED OPTIONS
--start_at <int>                  : Pipeline will be launched at step n (optional - mostly 
                                    for debugging)
--compute_cluster_group <string>  : If not specified will be set to "prok-meco.p"
--keep_singlets                   : If set, singlets won't be removed from cluster table 
                                    (SeqObs table). By Default, singlets will be remove
                                    from submitted cluster table.
--minWords <int>                  : Optional. Default = 120. This arg consists of the
                                    number of words for query in the RDP classifier.

OUTPUT:
--outdir <string>                 : Output directory into which files generated through 
                                    the pipeline will be stored.

NOTES:
This pipeline can also process pyrotag data, but it has to be 
submitted as properly formatted fastq files with barcodes in 
headers etc.
For input files, please submit either 
--infile_cluster_table <string> --infile_clusterfasta <other args>
OR 
--infile_otu_tab <string> --infile_otu_fasta <string> <other args>

BUGS/LIMITATIONS:
More RDP training sets will be supported in the future (e.g. V8, ITS).

AUTHOR/SUPPORT:
Julien Tremblay - jtremblay@lbl.gov
SeqObs algorithm by Edward Kirton - eskirton@lbl.gov
Qiime tools - www.qiime.org	

ENDHERE

## OPTIONS
my (
	$help, $infile_cluster_fasta, $infile_cluster_table, $outdir, $log, $barcodes, 
	$start_at, $mapping_file, $config_file, $compute_cluster_group, $no_unifrac,
	$keep_singlets, $infile_otu_table, $infile_otu_fasta, $minWords, $num_threads
);
my $verbose = 0;

my @cmd = @ARGV;
die "No tempdir specified, please specify a \$TMPDIR variable in your environment.\n" if(!$TMPDIR);
my $tmpdir = File::Temp->newdir(
	"tmpDirItaggerXXXXXXX",
	DIR => $TMPDIR."/",
	CLEANUP => 0 #Let itagger.pl manage the removal of temp files.
);

mkdir $tmpdir unless -d $tmpdir;

GetOptions(
    'infile_cluster_fasta=s' 	=> \$infile_cluster_fasta,
    'infile_cluster_table=s' 	=> \$infile_cluster_table,
	'infile_otu_table=s'		=> \$infile_otu_table,
	'infile_otu_fasta=s'		=> \$infile_otu_fasta,
	'barcodes=s' 				=> \$barcodes,
	'mapping_file=s' 			=> \$mapping_file,
	'config_file=s'				=> \$config_file,
	'outdir=s' 					=> \$outdir,
	'compute_cluster_group=s' 	=> \$compute_cluster_group,
	'no_unifrac'				=> \$no_unifrac,
	'keep_singlets'				=> \$keep_singlets,
	'minWords=i'				=> \$minWords,
	'num_threads=i'				=> \$num_threads,
	'start_at=i' 				=> \$start_at,
    'verbose' 					=> \$verbose,
    'help' 						=> \$help
);
if ($help) { print $usage; exit; }

## VALIDATE
die("\$RDP_JAR_PATH not defined\n") unless $RDP_JAR_PATH;
if($infile_otu_table){
	die("Must specify --infile_otu AND --infile_otu_fasta\n") if(!$infile_otu_fasta);
	die("--infile_otu does not exists! Typed wrong filename?\n") if((!-e $infile_otu_table) and (!-s $infile_otu_table));
	die("--infile_otu does not exists! Typed wrong filename?\n") if((!-e $infile_otu_table) and (!-s $infile_otu_table));
}else{
	die("--infile_cluster_fasta does not exists! Typed wrong filename?\n") if((!-e $infile_cluster_fasta) and (!-s $infile_cluster_fasta));
	die("--infile_cluster_table File does not exist! Typed wrong filename?\n") if((!-e $infile_cluster_table) and (!-s $infile_cluster_table));	
}
die("For input files, please submit either\n--infile_cluster_table <string> --infile_clusterfasta <other args>\nOR\n--infile_otu <string> --infile_otu_fasta <string> <other args>\n") if(
	($infile_cluster_fasta and $infile_otu_table) or
	($infile_cluster_table and $infile_otu_fasta)
);
die("Must specify --infile_otu AND --infile_otu_fasta\n") if($infile_otu_fasta and !$infile_otu_table);
die("--outdir required\n") unless $outdir;
if($mapping_file){
	die("--mapping_file does not exists! Typed wrong filename?\n") if((!-e $mapping_file) and (!-s $mapping_file));
}
die("--barcodes file is empty or does not exists! (Typed wrong filename?)\n") if((!-e $barcodes) and (!-s $barcodes));
$minWords = 120 unless($minWords);
die "Please enter a value lower or equal than 200 for --minWords\n" if($minWords > 200);
$num_threads = 1 unless($num_threads);

## START LOGGING
my $log_r; #log file reference.

# Get values for RDP training set and core ref db for sequence alignment.
my ($rdp_training_set, $CORE_DB) = parseConfigFile($config_file);
wl($log_r, "Using RDP training set: ".$rdp_training_set);
wl($log_r, "Using CORE DB: ".$CORE_DB);

$compute_cluster_group = "prok-meco.p" unless($compute_cluster_group);
$start_at = 0 unless $start_at;
$outdir = substr($outdir, 0, length($outdir)-1 ) if substr($outdir, -1) eq "/";

print STDERR $start_at."\n" if $verbose;

## MAKE COMMON ROOT OUTDIR AND SUBDIRS
mkdir $outdir unless -d $outdir;
makeSubDirs($outdir);

open($log_r, ">".$outdir."/itaggerDiversity_log.txt") or die "Can't open log file ".$outdir."/itaggerDiversity_log.txt";
wl($log_r, "Running itaggerDiversity version v".$VERSION." ...");
wl($log_r, "Hostname: " . hostname . "");
wl($log_r, "Username: " . $ENV{"LOGNAME"} . "");
wl($log_r, "Command: ".$0." ". join(" ", @cmd) . "");

###########################
##### CHECK PATH START ####
###########################
## Place current dir in $ENV{PATH} values
my $bin_dir_name = dirname(rel2abs($0));
$ENV{PATH} = $bin_dir_name.":".$ENV{PATH};

####################################
## Checking for external binaries ##
####################################

wl($log_r, "Checking for FLASH tool...");
my $flash = which('flash');
if(!defined($flash)) {
    wl($log_r, "FLASH is not on the path. Quitting...");
    die("FLASH is not on the path. Quitting.");
}else{
	wl($log_r, $flash);
}

wl($log_r, "Checking for fastx_quality_stats tool...");
my $fastx = which('fastx_quality_stats');
if(!defined($fastx)) {
    wl($log_r, "fastx_quality_stats is not on the path. Quitting...");
    die("fastx_quality_stats is not on the path. Quitting.");
}else{
	wl($log_r, $fastx);
}

wl($log_r, "Checking for rdp_classifier-2.5.jar tool...");
#my $rdp = ('/jgi/tools/misc_bio/rdp_classifier/DEFAULT/rdp_classifier-2.3.jar');
my $rdp = ($RDP_JAR_PATH);
if((!-e $rdp) and (!-s $rdp)){
    wl($log_r, "rdp_classifier-2.5.jar is not on the path. Quitting...");
    die("rdp_classifier-2.5.jar is not on the path. Quitting.");
}else{
	wl($log_r, $rdp);
}

wl($log_r, "Checking for FastTree tool...");
my $fasttree = which('FastTree');
if(!defined($fasttree)) {
    wl($log_r, "FastTree is not on the path. Quitting...");
    die("FastTree is not on the path. Quitting.");
}else{
	wl($log_r, $fasttree);
}

wl($log_r, "Checking for duk on the path ...");
my $duk = which('duk');
if(!defined($duk)) {
    die("duk is not on the path. Quitting.");
}else{
    wl($log_r, $duk);
}

wl($log_r, "Checking for pdf merging tools (gs) ...");
my $gs = which('gs');
if(!defined($duk)) {
    die("gs is not on the path. Quitting.");
}else{
    wl($log_r, $gs);
}

##################################
## Checking for itagger scripts ##
##################################
wl($log_r, "Checking for itaggerBinByLength.pl tool...");
my $bin_length_cmd = which('itaggerBinByLength.pl');
if(!defined($bin_length_cmd)) {
    wl($log_r, "itaggerBinByLength.pl is not on the path. Quitting...");
    die("itaggerBinByLength.pl is not on the path. Quitting.");
}else{
	wl($log_r, $bin_length_cmd);
}

wl($log_r, "Checking for itaggerITSFlashWrapper.pl tool...");
my $flashITS = which('itaggerITSFlashWrapper.pl');
if(!defined($flashITS)) {
    wl($log_r, "itaggerITSFlashWrapper.pl is not on the path. Quitting...");
    die("itaggerITSFlashWrapper.pl is not on the path. Quitting.");
}else{
	wl($log_r, $flashITS);
}
	
wl($log_r, "Checking for itaggerQscoreSheets.pl tool...");
my $qscores = which('itaggerQscoreSheets.pl');
if(!defined($qscores)) {
    wl($log_r, "itaggerQscoreSheets.pl is not on the path. Quitting...");
    die("itaggerQscoreSheets.pl is not on the path. Quitting.");
}else{
	wl($log_r, $qscores);
}

wl($log_r, "Checking for itaggerQscorePlots.pl tool...");
my $graph = which('itaggerQscorePlots.pl');
if(!defined($graph)) {
    wl($log_r, "itaggerQscorePlots.pl is not on the path. Quitting...");
    die("itaggerQscorePlots.pl is not on the path. Quitting.");
}else{
	wl($log_r, $graph);
}	

wl($log_r, "Checking for itaggerCutFastqSeq.pl tool...");
my $cut_fastq = which('itaggerCutFastqSeq.pl');
if(!defined($cut_fastq)) {
    wl($log_r, "itaggerCutFastqSeq.pl is not on the path. Quitting...");
    die("itaggerCutFastqSeq.pl is not on the path. Quitting.");
}else{
	wl($log_r, $cut_fastq);
}	
	
wl($log_r, "Checking for itaggerSeqObs.pl tool...");
my $seqobs = which('itaggerSeqObs.pl');
if(!defined($seqobs)) {
    wl($log_r, "itaggerSeqObs.pl is not on the path. Quitting...");
    die("itaggerSeqObs.pl is not on the path. Quitting.");
}else{
	wl($log_r, $seqobs);
}

wl($log_r, "Checking for itaggerParseObsTable.pl tool...");
my $parse_seqobs_table = which('itaggerParseObsTable.pl');
if(!defined($parse_seqobs_table)) {
    wl($log_r, "itaggerParseObsTable.pl is not on the path. Quitting...");
    die("itaggerParseObsTable.pl is not on the path. Quitting.");
}else{
	wl($log_r, $parse_seqobs_table);
}
	
wl($log_r, "Checking for itaggerAddTaxToSeqobs.pl tool...");
my $add_tax = which('itaggerAddTaxToSeqobs.pl');
if(!defined($add_tax)) {
    wl($log_r, "itaggerAddTaxToSeqobs.pl is not on the path. Quitting...");
    die("itaggerAddTaxToSeqobs.pl is not on the path. Quitting.");
}else{
	wl($log_r, $add_tax);
}

wl($log_r, "Checking for itaggerRmEmptyCol.pl tool...");
my $itagger_filter_ot = which('itaggerRmEmptyCol.pl');
if(!defined($itagger_filter_ot)) {
    wl($log_r, "itaggerRmEmptyCol.pl is not on the path. Quitting...");
    die("itaggerRmEmptyCol.pl is not on the path. Quitting.");
}else{
	wl($log_r, $itagger_filter_ot);
}

wl($log_r, "Checking for itaggerTxtToPdf.pl tool");
my $text2pdf = which('itaggerTxtToPdf.pl');
if(!defined($text2pdf)) {
    wl($log_r, "itaggerTxtToPdf.pl is not on the path. Quitting...");
    die("itaggerTxtToPdf.pl is not on the path. Quitting.");
}else{
	wl($log_r, $text2pdf);
}

wl($log_r, "Checking for itaggerDummyObsTable.pl tool...");
my $dummy_seqobs_from_fasta = which('itaggerDummyObsTable.pl');
if(!defined($dummy_seqobs_from_fasta)) {
    wl($log_r, "itaggerDummyObsTable.pl is not on the path. Quitting...");
    die("itaggerDummyObsTable.pl is not on the path. Quitting.");
}else{
    wl($log_r, $dummy_seqobs_from_fasta);
}

wl($log_r, "Checking for itaggerAbundanceThreshold.pl tool...");
my $abundance_threshold = which('itaggerAbundanceThreshold.pl');
if(!defined($abundance_threshold)) {
    wl($log_r, "itaggerAbundanceThreshold.pl is not on the path. Quitting...");
    die("itaggerAbundanceThreshold.pl is not on the path. Quitting.");
}else{
	wl($log_r, $abundance_threshold);
}

wl($log_r, "Checking for itaggerRDPWrapper.pl tool...");
my $rdp_wrapper = which('itaggerRDPWrapper.pl');
if(!defined($rdp_wrapper)) {
    wl($log_r, "itaggerRDPWrapper.pl is not on the path. Quitting...");
    die("itaggerRDPWrapper.pl is not on the path. Quitting.");
}else{
	wl($log_r, $rdp_wrapper);
}

###############################
## Parallel wrappers/scripts ##
###############################
wl($log_r, "Checking for itaggerItagsQC.pl tool...");
my $par_itags_qc = which('itaggerItagsQC.pl');
if(!defined($par_itags_qc)) {
	wl($log_r, "itaggerItagsQC.pl is not on the path. Quitting...");
    die("itaggerItagsQC.pl is not on the path. Quitting.");
}else{
    wl($log_r, $par_itags_qc);
}

wl($log_r, "Checking for itaggerRemoveUnpaired.pl tool...");
my $par_remove_unpaired_reads = which('itaggerRemoveUnpaired.pl');
if(!defined($par_remove_unpaired_reads)) {
    wl($log_r, "itaggerRemoveUnpaired.pl is not on the path. Quitting...");
    die("itaggerRemoveUnpaired.pl is not on the path. Quitting...");
}else{
	wl($log_r, $par_remove_unpaired_reads);
}

wl($log_r, "Checking for itaggerTrim.pl tool...");
my $par_qc = which('itaggerTrim.pl');
if(!defined($par_qc)) {
    wl($log_r, "itaggerTrim.pl is not on the path. Quitting...");
    die("itaggerTrim.pl is not on the path. Quitting.");
}else{
    wl($log_r, $par_qc);
}

wl($log_r, "Checking for itaggerFlash.pl FLASH wrapper tool...");
my $par_flash = which('itaggerFlash.pl');
if(!defined($par_flash)) {
    wl($log_r, "itaggerFlash.pl wrapper is not on the path. Quitting...");
    die("itaggerFlash.pl wrapper (itagger_parallel_flash.pl) is not on the path. Quitting.");
}else{
    wl($log_r, $par_flash);
}

wl($log_r, "Checking for itaggerSplitPairs.pl tool...");
my $par_split_pairs = which('itaggerSplitPairs.pl');
if(!defined($par_split_pairs)) {
   die("itaggerSplitPairs.pl tool is not on the path. Quitting.");
}else{
    wl($log_r, $par_split_pairs);
}

wl($log_r, "Checking for itaggerBarcodes.pl tool...");
my $barcodes_split_tool = which('itaggerBarcodes.pl');
if(!defined($barcodes_split_tool)) {
    wl($log_r, "itaggerBarcodes.pl is not on the path. Quitting...");
    die("itaggerBarcodes.pl is not on the path. Quitting.");
}else{
	wl($log_r, $barcodes_split_tool);
}

wl($log_r, "Checking for itaggerPhylumBarplot.pl tool...");	
my $graph_phylum = which('itaggerPhylumBarplot.pl');
if(!defined($graph_phylum)) {
    wl($log_r, "itaggerPhylumBarplot.pl is not on the path. Quitting...");
    die("itaggerPhylumBarplot.pl is not on the path. Quitting.");
}else{
	wl($log_r, $graph_phylum);
}

###################
## QIIME SCRIPTS ##
###################
wl($log_r, "Checking for pynast tool...");
my $pynast = which('pynast');
if(!defined($pynast)) {
    wl($log_r, "pynast is not on the path. Quitting...");
    die("pynast is not on the path. Quitting.");
}else{
	wl($log_r, $pynast);
}

wl($log_r, "Checking for summarize_taxa.py tool...");
my $summarize_taxa = which('summarize_taxa.py');
if(!defined($summarize_taxa)) {
    wl($log_r, "summarize_taxa.py is not on the path. Quitting...");
    die("summarize_taxa.py is not on the path. Quitting.");
}else{
	wl($log_r, $summarize_taxa);
}

wl($log_r, "Checking for plot_taxa_summary.py tool...");
my $plot_taxa = which('plot_taxa_summary.py');
if(!defined($plot_taxa)) {
    wl($log_r, "plot_taxa_summary.py is not on the path. Quitting...");
    die("plot_taxa_summary.py is not on the path. Quitting.");
}else{
	wl($log_r, $plot_taxa);
}

wl($log_r, "Checking for beta_diversity.py tool...");
my $beta_diversity = which('beta_diversity.py');
if(!defined($beta_diversity)) {
    wl($log_r, "beta_diversity.py is not on the path. Quitting...");
    die("beta_diversity.py is not on the path. Quitting.");
}else{
	wl($log_r, $beta_diversity);
}

wl($log_r, "Checking for principal_coordinates.py tool...");
my $principal_coordinates = which('principal_coordinates.py');
if(!defined($principal_coordinates)) {
    wl($log_r, "principal_coordinates.py is not on the path. Quitting...");
    die("principal_coordinates.py is not on the path. Quitting.");
}else{
	wl($log_r, $principal_coordinates);
}

wl($log_r, "Checking for make_2d_plots.py tool...");
my $make_2d_plots = which('make_2d_plots.py');
if(!defined($make_2d_plots)) {
    wl($log_r, "make_2d_plots.py is not on the path. Quitting...");
    die("make_2d_plots.py is not on the path. Quitting.");
}else{
	wl($log_r, $make_2d_plots);
}

wl($log_r, "Checking for make_3d_plots.py tool...");
my $make_3d_plots = which('make_3d_plots.py');
if(!defined($make_3d_plots)) {
    wl($log_r, "make_3d_plots.py is not on the path. Quitting...");
    die("make_3d_plots.py is not on the path. Quitting.");
}else{
	wl($log_r, $make_3d_plots);
}

wl($log_r, "Checking for multiple_rarefactions.py  tool...");
my $multiple_rarefactions = which('multiple_rarefactions.py');
if(!defined($multiple_rarefactions)) {
    wl($log_r, "multiple_rarefactions.py is not on the path. Quitting...");
    die("multiple_rarefactions.py is not on the path. Quitting.");
}else{
	wl($log_r, $multiple_rarefactions);
}

wl($log_r, "Checking for alpha_diversity.py tool...");
my $alpha_diversity = which('alpha_diversity.py');
if(!defined($alpha_diversity)) {
    wl($log_r, "alpha_diversity.py is not on the path. Quitting...");
    die("alpha_diversity.py is not on the path. Quitting.");
}else{
	wl($log_r, $alpha_diversity);
}

wl($log_r, "Checking for collate_alpha.py tool...");
my $collate_alpha = which('collate_alpha.py');
if(!defined($collate_alpha)) {
    wl($log_r, "collate_alpha is not on the path. Quitting...");
    die("collate_alpha is not on the path. Quitting.");
}else{
	wl($log_r, $collate_alpha);
}

wl($log_r, "Checking for make_rarefaction_plots.py  tool...");
my $make_rarefaction_plots = which('make_rarefaction_plots.py');
if(!defined($make_rarefaction_plots)) {
    wl($log_r, "make_rarefaction_plots.py is not on the path. Quitting...");
    die("make_rarefaction_plots.py is not on the path. Quitting.");
}else{
	wl($log_r, $make_rarefaction_plots);
}

wl($log_r, "Checking for plot_rank_abundance_graph.py tool...");
my $plot_rank_abundance_graph = which('plot_rank_abundance_graph.py');
if(!defined($plot_rank_abundance_graph)) {
    wl($log_r, "plot_rank_abundance_graph.py is not on the path. Quitting...");
    die("plot_rank_abundance_graph.py is not on the path. Quitting.");
}else{
	wl($log_r, $plot_rank_abundance_graph);
}
	
wl($log_r, "Checking for filter_alignment.py tool...");
my $filter_alignment = which('filter_alignment.py');
if(!defined($filter_alignment)) {
    wl($log_r, "filter_alignment.py is not on the path. Quitting...");
    die("filter_alignment.py is not on the path. Quitting.");
}else{
	wl($log_r, $filter_alignment);
}


###################
###### MAIN #######
###################
## Remove singlets
unless($keep_singlets or $infile_otu_table or $infile_otu_fasta){
	my $parse_table_string = $parse_seqobs_table;
	$parse_table_string .= " --infile_tab ".$infile_cluster_table;	
	$parse_table_string .= " --infile_fasta ".$infile_cluster_fasta;
	$parse_table_string .= " --singlet_threshold 1";
	$parse_table_string .= " --outfile_tab ".$outdir."/obs/obs_filtered.tab";
	$parse_table_string .= " --outfile_fasta ".$outdir."/obs/obs_filtered.fasta";
	wl($log_r, "Parsing SeqObs table: ".$parse_table_string);
	system($parse_table_string) if($start_at <= 1);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$parse_table_string." successfuly executed\n";	
}

my $curr_otu_table;
my $curr_fasta;
my $otu_table_prefix = "";
my $otu_fasta_prefix = "";
my $curr_cluster_table;

if($infile_otu_table){
	$curr_otu_table = $infile_otu_table;
	$curr_fasta = $infile_otu_fasta;
	$otu_table_prefix = basename($infile_otu_table);
	$otu_fasta_prefix = basename($infile_otu_fasta);
	$otu_table_prefix =~ s/\.tab//;
	$otu_table_prefix =~ s/\.txt//;
}else{
	$curr_otu_table = "";
	if($keep_singlets){
		$curr_fasta = $outdir."/obs/obs_filtered.fasta";
		$curr_cluster_table = $outdir."/obs/obs_filtered.tab";
	}else{
		$curr_fasta = $infile_cluster_fasta;
		$curr_cluster_table = $infile_cluster_table;
	}
}
$otu_table_prefix = "otu_table_filtered";
$otu_fasta_prefix = "fasta_clusters_filtered";


## JUST DO THIS STEP IF NO OTU TABLES WHERE PROVIDED IN INPUT
if($infile_cluster_fasta and $infile_cluster_table){
	
	#RDP_classifier
	my $rdp_string = "java -Xmx1g -jar ".$rdp;
	$rdp_string .= " -q ".$curr_fasta;
	$rdp_string .= " -o ".$outdir."/rdp/rdp.tab";
	$rdp_string .= " -t ".$rdp_training_set;
	$rdp_string .= " --minWords ".$minWords;
	wl($log_r, "Executing RDP classifier: ".$rdp_string);
	system($rdp_string) if($start_at <= 2);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$rdp_string." successfuly executed\n";

	#Add rdp taxonomy to SeqObs table
	my $add_tax_string = "perl ".$add_tax." ";
	$add_tax_string .= "--seqobs ".$infile_cluster_table." ";
	$add_tax_string .= "--rdp ".$outdir."/rdp/rdp.tab ";
	$add_tax_string .= "--cutoff 0.50 ";
	$add_tax_string .= "--outfile ".$outdir."/otu_tables/otu_table.tab ";
	$add_tax_string .= "--outfile_failed ".$outdir."/otu_tables/otu_table_failed.tab ";
	$add_tax_string .= "--tax_level best ";
	wl($log_r, "Merging rdp taxonomy to seqobs table: ".$add_tax_string);
	system($add_tax_string) if($start_at <= 3);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$add_tax_string." successfuly executed\n";
	
	$curr_otu_table = $outdir."/otu_tables/otu_table.tab ";

}

## Double check fasta file to only keep sequences that are in the otu table. Will save time for the PyNAST alignment step.
my %hash_otu_table;
open(OTU_IN, "<".$curr_otu_table) or die "Can't open OTU table ".$curr_otu_table."\n";
while(<OTU_IN>){
	chomp;
	next if($_ =~ m/#/);
	my @row = split(/\t/, $_);
	$hash_otu_table{$row[0]} = $_;	
}
close(OTU_IN);

my $parsed_fasta = $outdir."/obs/obs_filtered_parsed.fasta";
open(FASTA_P, ">".$parsed_fasta) or die "Can't open fasta file ".$parsed_fasta."\n";
my $ref_fasta_db = iTagger::FastaDb->new($curr_fasta) or die("Unable to open Fasta file, $curr_fasta\n");
while( my $curr = $ref_fasta_db->next_seq() ) {
	my $header = $curr->header();
	$header =~ s/>//;
	if(exists $hash_otu_table{$header}){
		print FASTA_P ">".$header."\n".$curr->seq."\n";
	}
}
close(FASTA_P);

# Replace current fasta file with the parsed fasta file.
$curr_fasta = $parsed_fasta;

#Do not compute tree (PyNAST -> filter_alignment.py -> FastTree) if no mapping file is provided.
if(defined($mapping_file)){
	unless($no_unifrac){
		
		#PyNAST
		my $pynast_string = "mpirun -np ".$num_threads;
		$pynast_string .= " ".$pynast;
		$pynast_string .= " -i ".$curr_fasta; 
		$pynast_string .= " -p 10";
		$pynast_string .= " -l 50";
		$pynast_string .= " -g ".$outdir."/pynast/pynast.log";
		$pynast_string .= " -a ".$outdir."/pynast/pynast.fasta";
		$pynast_string .= " -t ".$CORE_DB; 
		wl($log_r, "Executing PyNAST: ".$pynast_string);
		system($pynast_string) if($start_at <= 4);
		$? != 0 ? print STDERR "command failed: There was a problem with PyNAST...\n" :  print "Command ".$pynast_string." successfuly executed\n";
		
		#Filter alignment
		my $filter_alignment_string = $filter_alignment." ";
		$filter_alignment_string .= "-i ".$outdir."/pynast/pynast.fasta ";
		$filter_alignment_string .= "-o ".$outdir."/pynast/";
		wl($log_r, "Executing filter_alignment.py: ".$filter_alignment);
		system($filter_alignment_string) if($start_at <= 5);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$filter_alignment_string." successfuly executed\n";
	
		#FastTree
		my $fasttree_string = $fasttree ." ";
		$fasttree_string .= "-nt ".$outdir."/pynast/pynast_pfiltered.fasta > ".$outdir."/fasttree/tree.fasttree";
		wl($log_r, "Executing FastTree: ".$fasttree_string);
		system($fasttree_string) if($start_at <= 6);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$fasttree_string." successfuly executed\n";
	}
}
	
# Filter OTU table (remove columns that contains all zeros). Will crash on upcoming steps if we don't do so here...
my $filter_ot_string = $itagger_filter_ot." ";
$filter_ot_string .= "--infile ".$curr_otu_table." ";
$filter_ot_string .= "--outfile ".$outdir."/otu_tables/otu_table_filtered.tab";
wl($log_r, "Removing columns having only zero values: ".$filter_ot_string);
system($filter_ot_string) if($start_at <= 7);
$? != 0 ? die "command failed: $!\n" :  print "Command ".$filter_ot_string." successfuly executed\n";

## Summarize taxonomy with absolute abundance
for(my $i=1; $i<7; $i++){
	my $summarize_taxa_string = $summarize_taxa. " ";
	$summarize_taxa_string .= " -i ".$outdir."/otu_tables/otu_table_filtered.tab ";
	$summarize_taxa_string .= "-L ".$i." ";
	$summarize_taxa_string .= "-o ".$outdir."/tax_summary/absolute/ ";
	$summarize_taxa_string .= "-a ";
	wl($log_r, "Summarizing taxonomy: ".$summarize_taxa_string);
	system($summarize_taxa_string) if($start_at <= 8 );
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$summarize_taxa_string." successfuly executed\n";
}

## Summarize taxonomy with relative abundance
for(my $i=1; $i<7; $i++){
	my $summarize_taxa_string = $summarize_taxa. " ";
	$summarize_taxa_string .= " -i ".$outdir."/otu_tables/otu_table_filtered.tab ";
	$summarize_taxa_string .= "-L ".$i." ";
	$summarize_taxa_string .= "-o ".$outdir."/tax_summary/relative/ ";
	wl($log_r, "Summarizing taxonomy: ".$summarize_taxa_string);
	system($summarize_taxa_string) if($start_at <= 9);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$summarize_taxa_string." successfuly executed\n";
}

## Qiime make taxa plot absolute abundance
my $plot_taxa_string = $plot_taxa." ";
$plot_taxa_string .= "-i ".$outdir."/tax_summary/absolute/".$otu_table_prefix."_L1.txt,".$outdir."/tax_summary/absolute/".$otu_table_prefix."_L2.txt,".$outdir."/tax_summary/absolute/".$otu_table_prefix."_L3.txt,".$outdir."/tax_summary/absolute/".$otu_table_prefix."_L4.txt,".$outdir."/tax_summary/absolute/".$otu_table_prefix."_L5.txt,".$outdir."/tax_summary/absolute/".$otu_table_prefix."_L6.txt ";
$plot_taxa_string .= "-o ".$outdir."/tax_summary/plots ";
$plot_taxa_string .= "-c bar";
wl($log_r, "Plotting taxonomy: ".$plot_taxa_string);
system($plot_taxa_string) if($start_at <= 10);
$? != 0 ? print STDERR "command failed: $!\n" :  print "Command ".$plot_taxa_string." successfuly executed\n"; #Don't die if command does not work. This command will acutally fail if one row of a given barcode/index contains only zeros.

## Do not compute and generates reports for Beta diversity metrics if no mapping file is provided.
if(defined($mapping_file)){
	#Qiime PCA unifrac (do unweighted, weighted and bray_curtis)
	my $beta_div_string = $beta_diversity." ";
	unless($no_unifrac){
		#Beta-div
		$beta_div_string .= "-i ".$outdir."/otu_tables/otu_table_filtered.tab ";
		$beta_div_string .= "-m unweighted_unifrac ";
		$beta_div_string .= "-o ".$outdir."/beta_div/ ";
		$beta_div_string .= "-t ".$outdir."/fasttree/tree.fasttree ";
		wl($log_r, "Caculating beta-diversity: ".$beta_div_string);
		system($beta_div_string) if($start_at <= 11);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$beta_div_string." successfuly executed\n";
		
		$beta_div_string = $beta_diversity." ";
		$beta_div_string .= "-i ".$outdir."/otu_tables/otu_table_filtered.tab ";
		$beta_div_string .= "-m weighted_unifrac ";
		$beta_div_string .= "-o ".$outdir."/beta_div/ ";
		$beta_div_string .= "-t ".$outdir."/fasttree/tree.fasttree ";
		wl($log_r, "Caculating beta-diversity: ".$beta_div_string);
		system($beta_div_string) if($start_at <= 12);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$beta_div_string." successfuly executed\n";
	}
	$beta_div_string = $beta_diversity." ";
	$beta_div_string .= "-i ".$outdir."/otu_tables/otu_table_filtered.tab ";
	$beta_div_string .= "-m bray_curtis ";
	$beta_div_string .= "-o ".$outdir."/beta_div/ ";
	#$beta_div_string .= "-t ".$outdir."/fasttree/tree.fasttree ";
	wl($log_r, "Caculating beta-diversity: ".$beta_div_string);
	system($beta_div_string) if($start_at <= 13);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$beta_div_string." successfuly executed\n";

	my $pca_string;
	unless($no_unifrac){ #Read as: unless --no_unifrac is defined, do this {}
		#--------------------------------
		#principal component (UniFrac unweighted)
		$pca_string = $principal_coordinates." ";
		$pca_string .= "-i ".$outdir."/beta_div/unweighted_unifrac_".$otu_table_prefix.".tab ";
		$pca_string .= "-o ".$outdir."/beta_div/unweighted_unifrac_".$otu_table_prefix."_coords.tab ";
		wl($log_r, "Caculating principal coordinates: ".$pca_string);
		system($pca_string) if($start_at <= 14);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_string." successfuly executed\n";
		
		#principal component (UniFrac weighted)
		$pca_string = $principal_coordinates." ";
		$pca_string .= "-i ".$outdir."/beta_div/weighted_unifrac_".$otu_table_prefix.".tab ";
		$pca_string .= "-o ".$outdir."/beta_div/weighted_unifrac_".$otu_table_prefix."_coords.tab ";
		wl($log_r, "Caculating principal coordinates: ".$pca_string);
		system($pca_string) if($start_at <= 15);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_string." successfuly executed\n";
	}	

	#principal component (Bray curtis)
	$pca_string = $principal_coordinates." ";
	$pca_string .= "-i ".$outdir."/beta_div/bray_curtis_".$otu_table_prefix.".tab ";
	$pca_string .= "-o ".$outdir."/beta_div/bray_curtis_".$otu_table_prefix."_coords.tab ";
	wl($log_r, "Caculating principal coordinates: ".$pca_string);
	system($pca_string) if($start_at <= 16);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_string." successfuly executed\n";
	
	my $pca_plot_string = "";
	unless($no_unifrac){
		#--------------------------------
		# Generate PCA plots (unweighted)
		$pca_plot_string = $make_2d_plots." ";
		$pca_plot_string .= "-i ".$outdir."/beta_div/unweighted_unifrac_".$otu_table_prefix."_coords.tab ";
		$pca_plot_string .= "-m ".$mapping_file." ";
		$pca_plot_string .= "-o ".$outdir."/beta_div/plots/";
		wl($log_r, "Generating unweighted UniFrac pca plots: ".$pca_plot_string);
		system($pca_plot_string) if($start_at <= 17);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_plot_string." successfuly executed\n";

		$pca_plot_string = $make_3d_plots." ";
		$pca_plot_string .= "-i ".$outdir."/beta_div/unweighted_unifrac_".$otu_table_prefix."_coords.tab ";
		$pca_plot_string .= "-m ".$mapping_file." ";
		$pca_plot_string .= "-o ".$outdir."/beta_div/3d_plots/";
		wl($log_r, "Generating unweighted UniFrac pca 3d plots: ".$pca_plot_string);
		system($pca_plot_string) if($start_at <= 18);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_plot_string." successfuly executed\n";
	
		# Generate PCA plots (weighted)
		$pca_plot_string = $make_2d_plots." ";
		$pca_plot_string .= "-i ".$outdir."/beta_div/weighted_unifrac_".$otu_table_prefix."_coords.tab ";
		$pca_plot_string .= "-m ".$mapping_file." ";
		$pca_plot_string .= "-o ".$outdir."/beta_div/plots/";
		wl($log_r, "Generating weighted UniFrac pca plots: ".$pca_plot_string);
		system($pca_plot_string) if($start_at <= 19);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_plot_string." successfuly executed\n";
		
		$pca_plot_string = $make_3d_plots." ";
		$pca_plot_string .= "-i ".$outdir."/beta_div/weighted_unifrac_".$otu_table_prefix."_coords.tab ";
		$pca_plot_string .= "-m ".$mapping_file." ";
		$pca_plot_string .= "-o ".$outdir."/beta_div/3d_plots/";
		wl($log_r, "Generating weighted UniFrac pca 3d plots: ".$pca_plot_string);
		system($pca_plot_string) if($start_at <= 20);
		$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_plot_string." successfuly executed\n";
	}
	# Generate PCA plots (Bray curtis)
	$pca_plot_string = $make_2d_plots." ";
	$pca_plot_string .= "-i ".$outdir."/beta_div/bray_curtis_".$otu_table_prefix."_coords.tab ";
	$pca_plot_string .= "-m ".$mapping_file." ";
	$pca_plot_string .= "-o ".$outdir."/beta_div/plots/";
	print $pca_plot_string."\n";
	wl($log_r, "Generating Bray Curtis pca plots: ".$pca_plot_string);
	system($pca_plot_string) if($start_at <= 21);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_plot_string." successfuly executed\n";
	
	$pca_plot_string = $make_3d_plots." ";
	$pca_plot_string .= "-i ".$outdir."/beta_div/bray_curtis_".$otu_table_prefix."_coords.tab ";
	$pca_plot_string .= "-m ".$mapping_file." ";
	$pca_plot_string .= "-o ".$outdir."/beta_div/3d_plots/";
	print $pca_plot_string."\n";
	wl($log_r, "Generating Bray Curtis pca 3d plots: ".$pca_plot_string);
	system($pca_plot_string) if($start_at <= 22);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$pca_plot_string." successfuly executed\n";
	#--------------------------------
		
	# RAREFACTION
	# Before doing rarefaction, find max, min and step values.
	my ($min, $max, $step) = find_rarefaction_thresholds($curr_otu_table);
	#print "max: :".$max."\nmin: ".$min."\nstep: ".$step."\n";

	# Remove dir containing rarefaction if already exists from a previous analysis run.
	remove_tree('/alpha_div/rarefaction/');
	remove_tree('/alpha_div/alpha_rarefaction/');
	remove_tree('/alpha_div/collated/');
	remove_tree('/alpha_div/plots/');
	
	my $rarefaction_string = $multiple_rarefactions;
	$rarefaction_string .= " -i ".$curr_otu_table;
	$rarefaction_string .= " -m 0";
	$rarefaction_string .= " -x ".$min;
	$rarefaction_string .= " -s ".$step;
	$rarefaction_string .= " -n 100 ";
	$rarefaction_string .= " -o ".$outdir."/alpha_div/rarefaction/";
	wl($log_r, "Computing rarefaction: ".$rarefaction_string);
	system($rarefaction_string) if($start_at <= 23);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$rarefaction_string." successfuly executed\n";
	
	# ALPHA DIVERSITY
	my $alpha_div_string = $alpha_diversity." ";
	$alpha_div_string .= "-i ".$outdir."/alpha_div/rarefaction/ ";
	$alpha_div_string .= "-o ".$outdir."/alpha_div/alpha_rarefaction/ ";
	if($no_unifrac){
		$alpha_div_string .= "-m chao1,observed_species,shannon ";
	}else{
		$alpha_div_string .= "-m PD_whole_tree,chao1,observed_species,shannon ";
		$alpha_div_string .= "-t ".$outdir."/fasttree/tree.fasttree";
	}
	wl($log_r, "Computing alpha diversity metrics: ".$alpha_div_string);
	system($alpha_div_string) if($start_at <= 24);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$alpha_div_string." successfuly executed\n";
	
	# Collate alpha diversity files
	my $collate_alpha_string = $collate_alpha." ";
	$collate_alpha_string .= "-i ".$outdir."/alpha_div/alpha_rarefaction/ ";
	$collate_alpha_string .= "-o ".$outdir."/alpha_div/collated/";
	wl($log_r, "Collating alpha diversity files: ".$collate_alpha_string);
	system($collate_alpha_string) if($start_at <= 25);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$collate_alpha_string." successfuly executed\n";
	
	# Generate rarefaction plots;
	my $rarefaction_plot_string = $make_rarefaction_plots." ";
	$rarefaction_plot_string .= "-i ".$outdir."/alpha_div/collated/ ";
	$rarefaction_plot_string .= "-m ".$mapping_file." ";
	$rarefaction_plot_string .= "-o ".$outdir."/alpha_div/plots/";
	wl($log_r, "Generating rarefaction plots: ".$rarefaction_plot_string);
	system($rarefaction_plot_string) if($start_at <= 26);
	$? != 0 ? print STDERR "command failed: $!\n" :  print "Command ".$rarefaction_plot_string." successfuly executed\n";

}

## UPGMA CLUSTERING AND HEATMAPS
if($mapping_file){
	
	# UPGMA Clustering
	my $cmd = "upgma_cluster.py";
	$cmd .= " -i ".$outdir."/beta_div/unweighted_unifrac_".$otu_table_prefix.".tab ";
	$cmd .= " -o ".$outdir."/beta_div/unweighted_unifrac_".$otu_table_prefix."_UPGMA.tree ";
	system($cmd) if($start_at <= 27);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$cmd." successfuly executed\n";
	
	$cmd = "upgma_cluster.py";
	$cmd .= " -i ".$outdir."/beta_div/weighted_unifrac_".$otu_table_prefix.".tab ";
	$cmd .= " -o ".$outdir."/beta_div/weighted_unifrac_".$otu_table_prefix."_UPGMA.tree ";
	system($cmd) if($start_at <= 28);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$cmd." successfuly executed\n";
	
	$cmd = "upgma_cluster.py";
	$cmd .= " -i ".$outdir."/beta_div/bray_curtis_".$otu_table_prefix.".tab ";
	$cmd .= " -o ".$outdir."/beta_div/bray_curtis_".$otu_table_prefix."_UPGMA.tree ";
	system($cmd) if($start_at <= 29);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$cmd." successfuly executed\n";
}

## OTU HEAT MAP
my $cmd = "itaggerOTUHeatMap.pl ";
$cmd .= " --infile ".$curr_otu_table;
$cmd .= " --outfile ".$outdir."/heatmap/OTU_heatmap.pdf";
system($cmd);
$? != 0 ? die "command failed: $!\n" :  print "Command ".$cmd." successfuly executed\n";

# Log rank abundance
# Remove $outdir."log_rank_abundance dir if exists.
my $log_rank_string = $plot_rank_abundance_graph." ";
$log_rank_string .= "-s '*' ";
$log_rank_string .= "-i ".$curr_otu_table." ";
$log_rank_string .= "-o ".$outdir."/log_rank_abundance ";
wl($log_r, "Generating log rank abundance plot: ".$log_rank_string);
if(-d $outdir."/log_rank_abundance"){
	system("rm -rf ".$outdir."/log_rank_abundance");
}
system($log_rank_string) if($start_at <= 28);
$? != 0 ? die "command failed: $!\n" :  print "Command ".$log_rank_string." successfuly executed\n";

## GENERATE A PHYLUM BARPLOT FOR A QUICK VIEW OF HOW THE DATA LOOKS LIKE.
my $graph_phylum_string = $graph_phylum." ";
$graph_phylum_string .= "--infile ".$outdir."/tax_summary/absolute/".$otu_table_prefix."_L2.txt ";
$graph_phylum_string .= "--outfile_graph ".$outdir."/tax_summary/taxonomy_phylum_L2.pdf ";
$graph_phylum_string .= "--outfile_table ".$outdir."/tax_summary/taxonomy_phylum_L2.table";
wl($log_r, "Generating taxonomy plot for the phylum level: ".$graph_phylum_string);
system($graph_phylum_string) if($start_at <= 29);
$? != 0 ? die "command failed: $!\n" :  print "Command ".$graph_phylum_string." successfuly executed\n";

## GENERATE A MODIFIED LOG FILE HAVING ONLY COUNTS OF SEQS
#open(IN_LOG, $outdir."/itaggerDiversity_log.txt");
#open(COUNT, ">".$outdir."/itaggerDiversity_count_log.txt");
#my $flag = 0;
#while (my $line = <IN_LOG>){
#	chomp($line);
#	$flag = 1 if($line =~ m/======Reads summary======/);
#	print COUNT $line."\n" if($flag == 1);
#}
#close(IN_LOG);
#close(COUNT);

wl($log_r, "itaggerDiversity pipeline completed!");
close($log_r);
convertTextToPdf($outdir."/itaggerDiversity_log.txt");

#mergePdf(
#	$outdir."/itaggerDiversity_log.txt",
#	$outdir."/REPORT_".$barcodes_filename.".pdf"
#);

exit;

#################
## SUBROUTINES ##
#################
# This subroutine finds rarefaction threshold. Must be done before doing rarefaction analysis.
# @input : otu_table.tab
# @output : otu_table.tab (only containing bacteria/archaea organisms).
sub find_rarefaction_thresholds{
	my ($input) = @_;
	
	# Find max and min value and step;
	open(IN, "<".$input) or die "<sub rarefaction_threshold> Can't open file ".$input."\n";
	my $max = 0;
	my $min = 999999999;
	my @sums;
	my $counter = 0;
	while(<IN>){
		chomp;
		next if($_ =~ m/#/);
		my @row = split(/\t/, $_);
		shift(@row);
		pop(@row);
		
		for(my $i=0; $i<@row; $i++){
			my $value = $row[$i];

			if($counter == 0){
				$sums[$i] = 0;	
			}
			$sums[$i] = $sums[$i] + $value;
		}
		$counter++;
	}
	
	foreach my $value(@sums){
		#$max = $value if( $value > $max );
		$min = $value if( $value < $min );
	}
	print "MIN: ".$min."\n";
	close(IN);

	my $step = $min / 100;
	$step = sprintf("%.0d", $step);

	#if($max > 1000){
	#	$max = 1000;
	#	$min = 0;
	#	$step = 10;
	#}	
	
	return ($min, $max, $step);
}


## REMOVE TEMP FILES
sub END{
    system("rm ".$tmpdir." -rf");
}

# Writes the current time and a given text string to the log file.
#   @param $text - the text string
#   @returns - (nothing)
sub wl {
    my ($log_ref, $text) = @_;
    if (!defined($log_ref) || $log_ref == -1) {
        return;
    }
    print $log_ref strftime('%d-%b-%Y %H:%M', localtime), " $text\n";
}

# Return commat formatted numbers
# $_[0] - a number
# @returns comma-formatted number
sub commify {
    my $text = reverse $_[0];
    $text =~ s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;
    return scalar reverse $text
}
	
# Writes various reads count in the log file
# @inputs: null
# @returns: null
sub count_report{
}

# Count number of lines in a file (it is assumed it is a fastq file) and divide by 4. Return the value.
# @input: one fastq file
# @output: a number
sub count_fastq_reads{
    my $file = $_[0];
    print $file."\n";
    my $count = 0;

	if(-s $file and -e $file){
		$count = `cut -c -2 $file | wc -l`; 
    	chomp($count);
    	$count =~ m/(\d+)/;
    	$count = $1 / 4;
    	$count = commify($count);
	}
    $count = commify($count);

    return $count;
}


# sub makedirs: Make directories for each type of analyses. 
# @input: a directory
# @returns: nothin'!
sub makeSubDirs{
	my $prefix = $_[0];	

	mkdir $prefix."/heatmap" unless -d $prefix."/heatmap";	
	mkdir $prefix unless -d $prefix;
	my $obs_dir = $prefix."/obs";
	mkdir $obs_dir unless -d $obs_dir;
	my $fasttree_dir = $prefix."/fasttree";
	mkdir $fasttree_dir unless -d $fasttree_dir;
	my $rdp_dir = $prefix."/rdp";
	mkdir $rdp_dir unless -d $rdp_dir;
	my $otu_table_dir = $prefix."/otu_tables";
	mkdir $otu_table_dir unless -d $otu_table_dir;

	my $tax_dir = $prefix."/tax_summary";
	mkdir $tax_dir unless -d $tax_dir;
	mkdir $tax_dir."/absolute" unless -d $tax_dir."/absolute";
	mkdir $tax_dir."/relative" unless -d $tax_dir."/relative";

	mkdir $tax_dir."/plots" unless -d $tax_dir."/plots";

	my $beta_div_dir = $prefix."/beta_div";
	mkdir $beta_div_dir unless -d $beta_div_dir;
	mkdir $beta_div_dir."/plots" unless -d $beta_div_dir."/plots";
	my $alpha_div_dir = $prefix."/alpha_div";
	mkdir $alpha_div_dir unless -d $alpha_div_dir;
	mkdir $alpha_div_dir."/rarefaction" unless -d $alpha_div_dir."/rarefaction";
	mkdir $alpha_div_dir."/alpha_rarefaction" unless -d $alpha_div_dir."/alpha_rarefaction";
	mkdir $alpha_div_dir."/collated" unless -d $alpha_div_dir."/collated";
	mkdir $alpha_div_dir."/plots" unless -d $alpha_div_dir."/plots";
	my $pynast_dir = $prefix."/pynast";
	mkdir $pynast_dir unless -d $pynast_dir;
	my $log_rank_abundance_dir = $prefix."/log_rank_abundance";
}

sub mergePdf{
	my $file_1 = shift(@_);
	my $outfile = pop(@_);

	my $pdfjam_string = "pdfjam ".$file_1." '-' ";
	foreach my $file (@_){
		$pdfjam_string .= $file." '-' ";
		#$pdfjam_string .= $file_3." '-' ";
	}
	$pdfjam_string .= "--outfile ".$outfile;
	system($pdfjam_string);
	print "PDFJAM STRING: ".$pdfjam_string."\n";
	$? != 0 ? print "command failed: $!\n" :  print "Command ".$pdfjam_string." successfuly executed\n"; #Don't die for now as some people don't have access to /var/tmp dir needed by pdfjam
	#pdfjam file1.pdf '-' file2.pdf '1,2' file3.pdf '2-' --outfile output.pdf
}

sub convertTextToPdf{
	my $txt = $_[0];
	my $pdf = $txt;
	$pdf =~ s/\.txt/\.pdf/g;
	
	my $text2pdf_string = $text2pdf." ";
	$text2pdf_string .= "--infile ".$txt." ";
	$text2pdf_string .= "--outfile ".$pdf;
	system($text2pdf_string);
	$? != 0 ? die "command failed: $!\n" :  print "Command ".$text2pdf_string." successfuly executed\n";	
}

# This subroutine takes a configuration file and looks for some key values.
# @input : Configuration file path
# @output : Variables containing file paths for 1)RDP training set and 2) core db for sequence alignments.
sub parseConfigFile{
	my $config_file =  $_[0];
	
	my $RDP;
	my $CORE_DB = "NULL";
	my $CONTAMINANT_DB;
	my $PHIX_DB;
	my $CHIMERA_REF_DB;

	my $found_rdp = 0;
	my $found_contam = 0;
	my $found_phix = 0;
	my $found_chimera = 0;
	my $found_core = 0;

	open(CONFIG, "<".$config_file) or die "Can't open file ".$config_file."\n";
	while(<CONFIG>){
		chomp;
		next if($_ =~ m/#/);
		if($_ =~ m/RDP_TRAINING_SET=\"(.*)\"/){
			$RDP = $1;
			$found_rdp = 1;	
		}elsif($_ =~ m/CONTAMINANT_DB=\"(.*)\"/){
			$CONTAMINANT_DB = $1;
			$found_contam = 1;
		}elsif($_ =~ m/PHIX_DB=\"(.*)\"/){
			$PHIX_DB = $1;
			$found_phix = 1;
		}elsif($_ =~ m/CHIMERA_REF_DB=\"(.*)\"/){
			$CHIMERA_REF_DB = $1;
			$found_chimera = 1;
		}elsif($_ =~ m/CORE_DB=\"(.*)\"/){
			$CORE_DB = $1;
			$found_core = 1;
		}
	}
	close(CONFIG);

	# Check if files were found.	
	die "Could not find RDP_TRAINING_SET set value in configuration file : ".$config_file."\n"  if($found_rdp == 0);
	#die "Could not find CONTAMINANT_DB value in configuration file : ".$config_file."\n"  if($found_contam == 0);
	#die "Could not find PHIX_DB training set value in configuration file : ".$config_file."\n"  if($found_phix == 0);
	die "Could not find CORE_DB training set value in configuration file : ".$config_file."\n"  if($found_core == 0);
	#die "Could not find CHIMERA_REF_DB training set value in configuration file : ".$config_file."\n"  if($found_chimera == 0);
	
	# Check if files are empty.
	die "RDP training set file does not exist or is empty...\nFILE: ".$RDP."\n"  if((!-e $RDP) or (!-s $RDP));
	#die "Contaminant reference database file does not exist or is empty...\nFILE: ".$CONTAMINANT_DB."\n"  if((!-e $CONTAMINANT_DB) or (!-s $CONTAMINANT_DB));
	#die "PhiX sequence reference file does not exist or is empty...\nFILE: ".$PHIX_DB."\n"  if((!-e $PHIX_DB) or (!-s $PHIX_DB));
	die "Core DB sequence reference alignment file does not exist or is empty...\nFILE: ".$CORE_DB."\n"  if((!-e $CORE_DB) or (!-s $CORE_DB));
	#die "Chimera reference database file does not exist or is empty...\nFILE: ".$CHIMERA_REF_DB."\n"  if((!-e $CHIMERA_REF_DB) or (!-s $CHIMERA_REF_DB));

	return($RDP, $CORE_DB);	
}
